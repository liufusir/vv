import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.DI_9tK0V.js";const t="/assets/lifecycle_zh-CN.W0MNXI0C.W0MNXI0C.png",E=JSON.parse('{"title":"生命周期钩子","description":"","frontmatter":{},"headers":[],"relativePath":"guide/essentials/lifecycle.md","filePath":"guide/essentials/lifecycle.md"}'),l={name:"guide/essentials/lifecycle.md"};function p(h,s,r,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="生命周期钩子" tabindex="-1">生命周期钩子 <a class="header-anchor" href="#生命周期钩子" aria-label="Permalink to &quot;生命周期钩子&quot;">​</a></h1><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><h2 id="注册周期钩子​" tabindex="-1">注册周期钩子​ <a class="header-anchor" href="#注册周期钩子​" aria-label="Permalink to &quot;注册周期钩子​&quot;">​</a></h2><p>举例来说，<code>onMounted</code> 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码：</p><div class="language-vue vp-adaptive-theme"><button title="复制代码" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`the component is now mounted.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>还有其他一些钩子，会在实例生命周期的不同阶段被调用，最常用的是 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted" target="_blank" rel="noreferrer">onMounted</a>、<a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated" target="_blank" rel="noreferrer">onUpdated</a> 和 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted" target="_blank" rel="noreferrer">onUnmounted</a>。所有生命周期钩子的完整参考及其用法请参考 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer"><strong>API</strong></a> 索引。</p><p>当调用 <code>onMounted</code> 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上。这意味着这些钩子应当在组件初始化时被 <strong>同步</strong> 注册。例如，请不要这样做：</p><div class="language-js vp-adaptive-theme"><button title="复制代码" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 异步注册时当前组件实例已丢失</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这将不会正常工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>注意这并不意味着对 <code>onMounted</code> 的调用必须放在 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 内的词法上下文中。<code>onMounted()</code> 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 <code>setup()</code>就可以。</p><h2 id="生命周期图示​" tabindex="-1">生命周期图示​ <a class="header-anchor" href="#生命周期图示​" aria-label="Permalink to &quot;生命周期图示​&quot;">​</a></h2><p>下面是实例生命周期的图表。你现在并不需要完全理解图中的所有内容，但以后它将是一个有用的参考。</p><p><img src="`+t+'" alt="组件生命周期图示"></p><p>有关所有生命周期钩子及其各自用例的详细信息，请参考<a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer">生命周期钩子 API 索引</a>。</p>',13)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
